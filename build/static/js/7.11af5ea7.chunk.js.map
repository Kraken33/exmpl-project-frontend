{"version":3,"sources":["pages/api/index.module.scss","pages/api/types.ts","pages/api/view.tsx","pages/api/container.ts"],"names":["module","exports","EKeys","ERequestDataType","TreeNode","TreeSelect","TabPane","Tabs","Container","compose","withIntl","withProps","routes","values","wrapper","intl","methods","HttpMethods","POST","GET","PUT","DELETE","useState","method","request","EMPTY_STRING","json","header","response","state","setState","apiRequestPlaceholder","apiSubmitButtonLabel","apiRequestDataTypeJson","apiRequestDataTypeHeader","requestDataTypes","value","label","isSubmitted","getStateProp","name","onChange","e","sendRequest","a","JSON","parse","http","url","params","data","headers","renderRequestDataTypes","map","tab","key","options","theme","onBeforeChange","_","__","renderMethodOptions","Option","className","styles","api","span","api_methods","showSearch","dropdownStyle","maxHeight","overflow","placeholder","allowClear","api_request","treeDefaultExpandAll","route","title","api_submit","disabled","onClick","defaultActiveKey","src"],"mappings":"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","file":"static/js/7.11af5ea7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"api\":\"api_api__1Iw7g\",\"api_methods\":\"api_api_methods__3oAIl\",\"api_request\":\"api_api_request__P3DEf\",\"api_submit\":\"api_api_submit__3gmpH\"};","import { HttpMethods } from \"consts\";\n\nexport enum EKeys {\n  \"method\" = \"method\",\n  \"request\" = \"request\",\n  \"json\" = \"json\",\n  \"response\" = \"response\",\n  \"header\" = \"header\",\n}\n\nexport enum ERequestDataType {\n  \"json\" = \"json\",\n  \"header\" = \"header\",\n}\n\nexport type Method = keyof typeof HttpMethods;\n\nexport interface State {\n  method: string;\n  request: string;\n  json: string;\n  response: { [k: string]: any };\n  header: string;\n}\n\nexport type RequestDataTypes = Array<{\n  value: ERequestDataType;\n  label: string;\n}>;\n\nexport interface InnerProps {\n  routes: string[];\n  intl: { [k: string]: string };\n}\n\nexport type KeysUnion = Exclude<EKeys, EKeys.response>;\n","import { Button, Col, Divider, Row, Select, Tabs, TreeSelect } from \"antd\";\nimport { EMPTY_STRING, HttpMethods } from \"consts\";\nimport { map } from \"lodash/fp\";\nimport React, { useState } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport ReactJson from \"react-json-view\";\nimport { http } from \"services/http\";\n\nimport styles from \"./index.module.scss\";\nimport {\n  EKeys,\n  ERequestDataType,\n  InnerProps,\n  KeysUnion,\n  RequestDataTypes,\n  State,\n} from \"./types\";\n\nconst { TreeNode } = TreeSelect;\nconst { TabPane } = Tabs;\n\nconst Component: React.FC<InnerProps> = ({ routes, intl }) => {\n  const methods: Array<keyof typeof HttpMethods> = [\n    HttpMethods.POST,\n    HttpMethods.GET,\n    HttpMethods.PUT,\n    HttpMethods.DELETE,\n  ];\n\n  const [state, setState] = useState<State>({\n    method: methods[0],\n    request: EMPTY_STRING,\n    json: EMPTY_STRING,\n    header: EMPTY_STRING,\n    response: {},\n  });\n\n  const {\n    apiRequestPlaceholder,\n    apiSubmitButtonLabel,\n    apiRequestDataTypeJson,\n    apiRequestDataTypeHeader,\n  } = intl;\n\n  const requestDataTypes: RequestDataTypes = [\n    {\n      value: ERequestDataType.json,\n      label: apiRequestDataTypeJson,\n    },\n    {\n      value: ERequestDataType.header,\n      label: apiRequestDataTypeHeader,\n    },\n  ];\n  const isSubmitted = !!state.request;\n\n  const getStateProp = (name: KeysUnion): { value: string; onChange: any } => ({\n    value: state[name],\n    onChange: (e: any) => {\n      setState({\n        ...state,\n        [name]: e,\n      });\n    },\n  });\n\n  const getCodeMirrorProp = (\n    name: KeysUnion\n  ): { value: string; options: any; onBeforeChange: any } => ({\n    options: {\n      theme: \"material\",\n    },\n    value: state[name],\n    onBeforeChange: (_: any, __: any, value: string) => {\n      setState({ ...state, [name]: value });\n    },\n  });\n\n  const sendRequest = async () => {\n    try {\n      const { method, request, header } = state;\n      const json = state.json ? JSON.parse(state.json) : {};\n      // @TODO Finish it (data в зависимости от метода и хедеры подключить)\n\n      const response = await http({\n        url: request,\n        method: method as any,\n        params: json,\n        data: json,\n        headers: {},\n      });\n\n      setState({ ...state, response });\n    } catch (e) {\n      setState({ ...state, response: e });\n    }\n  };\n\n  const renderRequestDataTypes = map(({ value, label }) => (\n    <TabPane tab={label} key={value}>\n      <CodeMirror {...getCodeMirrorProp(value)} />\n    </TabPane>\n  ));\n\n  const renderMethodOptions = map((method: string) => (\n    <Select.Option key={method} value={method}>\n      {method}\n    </Select.Option>\n  ));\n\n  return (\n    <div className={styles.api}>\n      <Row>\n        <Col span={24}>\n          <Row>\n            <Col span={6}>\n              <Select\n                {...getStateProp(EKeys.method)}\n                className={styles.api_methods}\n              >\n                {renderMethodOptions(methods)}\n              </Select>\n            </Col>\n            <Col span={14}>\n              <TreeSelect\n                showSearch\n                dropdownStyle={{ maxHeight: 400, overflow: \"auto\" }}\n                placeholder={apiRequestPlaceholder}\n                allowClear\n                className={styles.api_request}\n                treeDefaultExpandAll\n                {...getStateProp(EKeys.request)}\n              >\n                {routes.map((route: any) => (\n                  <TreeNode value={route()} title={route()} key={route()} />\n                ))}\n              </TreeSelect>\n            </Col>\n            <Col span={4}>\n              <Button\n                className={styles.api_submit}\n                disabled={!isSubmitted}\n                onClick={sendRequest}\n              >\n                {apiSubmitButtonLabel}\n              </Button>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          <Tabs defaultActiveKey={requestDataTypes[0].value as any}>\n            {renderRequestDataTypes(requestDataTypes)}\n          </Tabs>\n        </Col>\n        <Col span={24}>\n          <Divider />\n          <ReactJson src={state.response} />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport { Component };\n","import { values } from \"lodash/fp\";\nimport { compose, withProps } from \"recompose\";\nimport { routes } from \"services/api\";\nimport { withIntl } from \"services/intl\";\n\nimport { InnerProps } from \"./types\";\nimport { Component } from \"./view\";\n\nconst wrapper = compose<InnerProps, InnerProps>(\n  withIntl,\n  withProps({\n    routes: values(routes),\n  })\n);\n\nconst Container = wrapper(Component);\n\nexport { Container };\n"],"sourceRoot":""}